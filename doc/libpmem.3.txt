libpmem(3)                 Library Functions Manual                 libpmem(3)



NAME
       libpmem - persistent memory support library

SYNOPSIS
       #include <libpmem.h>

       cc ... -lpmem

       Most commonly used functions:

       int pmem_is_pmem(void *addr, size_t len);
       void pmem_persist(void *addr, size_t len);
       int pmem_msync(void *addr, size_t len);
       void *pmem_map(int fd);

       Partial flushing operations:

       void pmem_flush(void *addr, size_t len);
       void pmem_drain(void);
       int pmem_has_hw_drain(void);

       Copying to persistent memory:

       void *pmem_memmove_persist(void *pmemdest, const void *src, size_t len);
       void *pmem_memcpy_persist(void *pmemdest, const void *src, size_t len);
       void *pmem_memset_persist(void *pmemdest, int c, size_t len);
       void *pmem_memmove_nodrain(void *pmemdest, const void *src, size_t len);
       void *pmem_memcpy_nodrain(void *pmemdest, const void *src, size_t len);
       void *pmem_memset_nodrain(void *pmemdest, int c, size_t len);

       Library API versioning:

       const char *pmem_check_version(
           unsigned major_required,
           unsigned minor_required);

       Error handling:

       const char *pmem_errormsg(void);


DESCRIPTION
       libpmem  provides low-level persistent memory (pmem) support for appli‐
       cations using direct access storage (DAX), which is storage  that  sup‐
       ports  load/store  access  without  paging  blocks from a block storage
       device.  Some types of non-volatile memory DIMMs (NVDIMMs) provide this
       type  of byte addressable access to storage.  A persistent memory aware
       file system is typically used to expose the direct access  to  applica‐
       tions.   Memory mapping a file from this type of file system results in
       the load/store, non-paged access to pmem.

       This library is for applications that use persistent  memory  directly,
       without the help of any library-supplied transactions or memory alloca‐
       tion.  Higher-level libraries that build on libpmem are  available  and
       are recommended for most applications, see:

              libpmemobj(3),  a  general  use persistent memory API, providing
              memory allocation and transactional operations on variable-sized
              objects.

              libpmemblk(3),  providing  pmem-resident  arrays  of fixed-sized
              blocks with atomic updates.

              libpmemlog(3), providing a pmem-resident log file.

       Under normal usage, libpmem will never print messages or  intentionally
       cause the process to exit.  The only exception to this is the debugging
       information, when enabled, as described under DEBUGGING AND ERROR  HAN‐
       DLING below.

MOST COMMONLY USED FUNCTIONS
       Most  pmem-aware  applications  will  take  advantage  of  higher level
       libraries that alleviate the  application  from  calling  into  libpmem
       directly.  Application developers that wish to access raw memory mapped
       persistence directly (via mmap(2)) and that wish to take on the respon‐
       sibility  for  flushing  stores  to persistence will find the functions
       described in this section to be the most commonly used.

       int pmem_is_pmem(void *addr, size_t len);

              The pmem_is_pmem() function returns  true  only  if  the  entire
              range  [addr,  addr+len)  consists of persistent memory.  A true
              return from pmem_is_pmem() means it is  safe  to  use  pmem_per‐
              sist()  and  the related functions below to make changes durable
              for that memory range.

              The implementation  of  pmem_is_pmem()  requires  a  non-trivial
              amount  of work to determine if the given range is entirely per‐
              sistent  memory.   For  this  reason,  it  is  better  to   call
              pmem_is_pmem() once when a range of memory is first encountered,
              save the result, and use the saved result to  determine  whether
              pmem_persist()  or  msync(2) is appropriate for flushing changes
              to persistence.  Calling pmem_is_pmem() each  time  changes  are
              flushed to persistence will not perform well.

              WARNING:  Using  pmem_persist()  on a range where pmem_is_pmem()
              returns false  may  not  do  anything  useful  --  use  msync(2)
              instead.

       void pmem_persist(void *addr, size_t len);

              Force  any  changes  in  the range [addr, addr+len) to be stored
              durably in persistent memory.  This  is  equivalent  to  calling
              msync(2) but may be more optimal and will avoid calling into the
              kernel if possible.  There are no alignment restrictions on  the
              range  described  by addr and len, but pmem_persist() may expand
              the range as necessary to meet platform alignment requirements.

              WARNING: Like msync(2), there is nothing atomic or transactional
              about  this  call.  Any unwritten stores in the given range will
              be written, but some stores may have  already  been  written  by
              virtue of normal cache eviction/replacement policies.  Correctly
              written code must not depend on stores waiting  until  pmem_per‐
              sist() is called to become persistent -- they can become persis‐
              tent at any time before pmem_persist() is called.

       int pmem_msync(void *addr, size_t len);

              The function pmem_msync() is  like  pmem_persist()  in  that  it
              forces  any  changes  in the range [addr, addr+len) to be stored
              durably.  Since it calls msync(), this function works on  either
              persistent  memory  or a memory mapped file on traditional stor‐
              age.  pmem_msync()  takes  steps  to  ensure  the  alignment  of
              addresses and lengths passed to msync() meet the requirements of
              that system call.  It calls msync() with  the  MS_SYNC  flag  as
              described  in  msync(2).   Typically the application only checks
              for the existence of persistent memory once, and then uses  that
              result throughout the program, for example:

                  /* do this call once, after the pmem is memory mapped */
                  int is_pmem = pmem_is_pmem(rangeaddr, rangelen);

                  /* ... make changes to a range of pmem ... */

                  /* make the changes durable */
                  if (is_pmem)
                      pmem_persist(subrangeaddr, subrangelen);
                  else
                      pmem_msync(subrangeaddr, subrangelen);

                  /* ... */

              The return value of pmem_msync() is the return value of msync(),
              which can return -1 and set errno to indicate an error.

       void *pmem_map(int fd);

              The pmem_map() function creates a new read/write mapping for the
              entire  file referred by to file descriptor fd, where fd must be
              a file descriptor for a file opened for both reading  and  writ‐
              ing.   pmem_map()  will  map the file using mmap(2), but it also
              takes extra steps to make large page mappings more  likely.   On
              success, pmem_map() returns a pointer to mapped area.  On error,
              NULL is returned, and errno is  set  appropriately.   To  delete
              mappings created with pmem_map(), use munmap(2).

PARTIAL FLUSHING OPERATIONS
       The  functions in this section provide access to the stages of flushing
       to persistence, for the less common cases where  an  application  needs
       more  control  of the flushing operations than the pmem_persist() func‐
       tion described above.

       void pmem_flush(void *addr, size_t len);
       void pmem_drain(void);

              These functions provide partial versions of  the  pmem_persist()
              function  described  above.  pmem_persist() can be thought of as
              this:

              void
              pmem_persist(void *addr, size_t len)
              {
                  /* flush the processor caches */
                  pmem_flush(addr, len);

                  /* wait for any pmem stores to drain from HW buffers */
                  pmem_drain();
              }

              These functions allow advanced  programs  to  create  their  own
              variations of pmem_persist().  For example, a program that needs
              to flush several discontiguous ranges can call pmem_flush()  for
              each range and then follow up by calling pmem_drain() once.

              NOTE:  Some software is designed for custom platforms that obvi‐
              ate the need for using  PCOMMIT  (perhaps  the  platform  issues
              PCOMMIT  on shutdown or something similar).  Even in such cases,
              it is recommended that applications using libpmem  do  not  skip
              the  step  of  calling pmem_drain(), either directly or by using
              pmem_persist().  The recommended way to inhibit use of the PCOM‐
              MIT  instruction  is  by setting the PMEM_NO_PCOMMIT environment
              variable as described in the ENVIRONMENT VARIABLES section.

       int pmem_has_hw_drain(void);

              The pmem_has_hw_drain() function returns  true  if  the  machine
              supports the hardware drain function for persistent memory, such
              as that provided by the PCOMMIT instruction on Intel processors.
              If  support  for  hardware  drain  is  not  found,  or cannot be
              detected by the library, pmem_has_hw_drain() will return  false.
              Although  it  is typically an administrative task to provide the
              correct platform configuration for persistent memory, this func‐
              tion  is provided for the less common cases where an application
              needs to ensure this feature is available.  Note that  the  lack
              of  this feature means that calling pmem_persist() may not fully
              ensure stores are durable, without additional platform  features
              such as Asynchronous DRAM Refresh (ADR) or something similar.

COPYING TO PERSISTENT MEMORY
       The  functions  in this section provide optimized copying to persistent
       memory.

       void *pmem_memmove_persist(void *pmemdest, const void *src,
           size_t len);
       void *pmem_memcpy_persist(void *pmemdest, const void *src, size_t len);
       void *pmem_memset_persist(void *pmemdest, int c, size_t len);

              The pmem_memmove_persist(), pmem_memcpy_persist(), and pmem_mem‐
              set_persist(),  functions  provide  the  same  memory copying as
              their namesakes memmove(3) memcpy(3), and memset(3), and  ensure
              that  the  result has been flushed to persistence before return‐
              ing.  For example, the following code is functionally equivalent
              to pmem_memmove_persist():

              void *
              pmem_memmove_persist(void *pmemdest, const void *src, size_t len)
              {
                  void *retval = memmove(pmemdest, src, len);

                  pmem_persist(pmemdest, len);

                  return retval;
              }

              Calling  pmem_memmove_persist()  may out-perform the above code,
              however, since the libpmem implementation may take advantage  of
              the fact that pmemdest is persistent memory and use instructions
              such as non-temporal stores to avoid the need to flush processor
              caches.

              WARNING:  Using  these  functions  where  pmem_is_pmem() returns
              false may not do anything useful.  Use the normal libc functions
              in that case.

       void *pmem_memmove_nodrain(void *pmemdest, const void *src,
           size_t len);
       void *pmem_memcpy_nodrain(void *pmemdest, const void *src, size_t len);
       void *pmem_memset_nodrain(void *pmemdest, int c, size_t len);

              The  pmem_memmove_nodrain(), pmem_memcpy_nodrain() and pmem_mem‐
              set_nodrain() functions are similar  to  pmem_memmove_persist(),
              pmem_memcpy_persist(),   and   pmem_memset_persist()   described
              above, except they  skip  the  final  pmem_drain()  step.   This
              allows  applications  to optimize cases where several ranges are
              being copied to persistent memory, followed by a single call  to
              pmem_drain().  The following example illustrates how these func‐
              tions might be used to avoid multiple calls to pmem_drain() when
              copying several ranges of memory to pmem:

                  /* ... write several ranges to pmem ... */
                  pmem_memcpy_nodrain(pmemdest1, src1, len1);
                  pmem_memcpy_nodrain(pmemdest2, src2, len2);

                  /* ... */

                  /* wait for any pmem stores to drain from HW buffers */
                  pmem_drain();

              WARNING:  Using pmem_memmove_nodrain(), pmem_memcpy_nodrain() or
              pmem_memset_nodrain()  on  a  destination  where  pmem_is_pmem()
              returns false may not do anything useful.

LIBRARY API VERSIONING
       This  section  describes  how  the  library  API is versioned, allowing
       applications to work with an evolving API.

       const char *pmem_check_version(
                  unsigned major_required,
                  unsigned minor_required);

              The  pmem_check_version()  function  is  used  to  see  if   the
              installed  libpmem  supports  the  version  of  the  library API
              required by an application.  The easiest way to do this  is  for
              the  application to supply the compile-time version information,
              supplied by defines in <libpmem.h>, like this:

              reason = pmem_check_version(PMEM_MAJOR_VERSION,
                                          PMEM_MINOR_VERSION);
              if (reason != NULL) {
                  /*  version check failed, reason string tells you why */
              }

              Any mismatch in the major version number is considered  a  fail‐
              ure,  but  a library with a newer minor version number will pass
              this check since increasing minor versions imply backwards  com‐
              patibility.

              An  application can also check specifically for the existence of
              an interface by checking for the version  where  that  interface
              was  introduced.  These versions are documented in this man page
              as follows: unless otherwise specified, all interfaces described
              here  are  available  in version 1.0 of the library.  Interfaces
              added after version 1.0 will contain the text introduced in ver‐
              sion x.y in the section of this manual describing the feature.

              When the version check performed by pmem_check_version() is suc‐
              cessful, the return value is NULL.  Otherwise the  return  value
              is a static string describing the reason for failing the version
              check.  The string returned by pmem_check_version() must not  be
              modified or freed.

DEBUGGING AND ERROR HANDLING
       Two  versions  of libpmem are typically available on a development sys‐
       tem.  The normal version, accessed when a program is linked  using  the
       -lpmem option, is optimized for performance.  That version skips checks
       that impact performance and never logs any trace  information  or  per‐
       forms any run-time assertions.  If an error is detected during the call
       to libpmem function, an  application  may  retrieve  an  error  message
       describing the reason of failure using the following function:

       const char *pmem_errormsg(void);

              The  pmem_errormsg() function returns a pointer to a static buf‐
              fer containing the last error message logged for current thread.
              The  error  message may include description of the corresponding
              error code (if errno was set), as returned by strerror(3).   The
              error  message buffer is thread-local; errors encountered in one
              thread do not affect its value in other threads.  The buffer  is
              never  cleared  by any library function; its content is signifi‐
              cant only when the return value  of  the  immediately  preceding
              call  to  libpmem  function  indicated an error, or if errno was
              set.  The application must not modify or free the error  message
              string,  but  it  may  be  modified by subsequent calls to other
              library functions.

       A second version of libpmem, accessed when a program uses the libraries
       under  /usr/lib/nvml_debug,  contains  run-time  assertions  and  trace
       points.  The typical way to access the debug  version  is  to  set  the
       environment   variable   LD_LIBRARY_PATH   to   /usr/lib/nvml_debug  or
       /usr/lib64/nvml_debug  depending  on  where  the  debug  libraries  are
       installed  on the system.  The trace points in the debug version of the
       library are enabled  using  the  environment  variable  PMEM_LOG_LEVEL,
       which can be set to the following values:

       0      This  is  the  default level when PMEM_LOG_LEVEL is not set.  No
              log messages are emitted at this level.

       1      Additional details on any errors detected are logged  (in  addi‐
              tion  to  returning  the errno-based errors as usual).  The same
              information may be retrieved using pmem_errormsg().

       2      A trace of basic operations is logged.

       3      This level enables a very verbose amount of function call  trac‐
              ing in the library.

       4      This  level enables voluminous and fairly obscure tracing infor‐
              mation that is likely only useful to the libpmem developers.

       The environment variable PMEM_LOG_FILE specifies a file name where  all
       logging  information  should  be written.  If the last character in the
       name is "-", the PID of the current process will  be  appended  to  the
       file  name  when the log file is created.  If PMEM_LOG_FILE is not set,
       the logging output goes to stderr.

       Setting the environment variable PMEM_LOG_LEVEL has no  effect  on  the
       non-debug version of libpmem.

ENVIRONMENT VARIABLES
       libpmem can change its default behavior based on the following environ‐
       ment variables.  These are largely intended for  testing  and  are  not
       normally required.

       PMEM_IS_PMEM_FORCE=val

              If  val  is  0  (zero),  then  pmem_is_pmem() will always return
              false.  Setting val to 1 causes pmem_is_pmem() to always  return
              true.   This variable is mostly used for testing but can be used
              to force pmem behavior on a system where a range of pmem is  not
              detectable as pmem for some reason.

       PMEM_NO_PCOMMIT=1

              Setting  this  environment variable to 1 forces libpmem to never
              issue the Intel PCOMMIT instruction.  This can be used on  plat‐
              forms  where the hardware drain function is performed some other
              way, like automatic flushing during a power failure.

              WARNING: Using this environment variable incorrectly may  impact
              program correctness.

       PMEM_NO_CLWB=1

              Setting  this  environment variable to 1 forces libpmem to never
              issue the CLWB instruction on Intel hardware,  falling  back  to
              other cache flush instructions instead (CLFLUSHOPT or CLFLUSH on
              Intel hardware).  Without  this  environment  variable,  libpmem
              will  always  use  the  CLWB  instruction for flushing processor
              caches on platforms that support the instruction.  This variable
              is  intended  for use during library testing but may be required
              for some rare cases where using CLWB has a  negative  impact  on
              performance.

       PMEM_NO_CLFLUSHOPT=1

              Setting  this  environment variable to 1 forces libpmem to never
              issue the CLFLUSHOPT instruction on Intel hardware, falling back
              to  the  CLFLUSH instructions instead.  Without this environment
              variable, libpmem will always use the CLFLUSHOPT instruction for
              flushing processor caches on platforms that support the instruc‐
              tion, but  where  CLWB  is  not  available.   This  variable  is
              intended for use during library testing.

       PMEM_NO_MOVNT=1

              Setting  this  environment variable to 1 forces libpmem to never
              use the non-temporal move instructions on Intel hardware.  With‐
              out this environment variable, libpmem will use the non-temporal
              instructions for copying larger ranges to persistent  memory  on
              platforms  that  support  the  instructions.   This  variable is
              intended for use during library testing.

       PMEM_MOVNT_THRESHOLD=val

              This environment variable allows overriding the  minimal  length
              of  pmem_memcpy_*(),  pmem_memmove_*() or pmem_memset_*() opera‐
              tions, for which libpmem uses  non-temporal  move  instructions.
              Setting  this environment variable to 0 forces libpmem to always
              use the non-temporal move instructions if available.  It has  no
              effect  if PMEM_NO_MOVNT variable is set to 1.  This variable is
              intended for use during library testing.

EXAMPLES
       The following example uses libpmem to flush changes made to  raw,  mem‐
       ory-mapped persistent memory.

       WARNING:  there  is  nothing  transactional about the pmem_persist() or
       pmem_msync() calls in  this  example.   Interrupting  the  program  may
       result in a partial write to pmem.  Use a transactional library such as
       libpmemobj(3) to avoid torn updates.

              #include <sys/types.h>
              #include <sys/stat.h>
              #include <fcntl.h>
              #include <stdio.h>
              #include <errno.h>
              #include <stdlib.h>
              #include <unistd.h>
              #include <string.h>
              #include <libpmem.h>

              /* using 4k of pmem for this example */
              #define PMEM_LEN 4096

              int
              main(int argc, char *argv[])
              {
                  int fd;
                  char *pmemaddr;
                  int is_pmem;

                  /* create a pmem file */
                  if ((fd = open("/pmem-fs/myfile",
                                       O_CREAT|O_RDWR, 0666)) < 0) {
                      perror("open");
                      exit(1);
                  }

                  /* allocate the pmem */
                  if ((errno = posix_fallocate(fd, 0, PMEM_LEN)) != 0) {
                      perror("posix_fallocate");
                      exit(1);
                  }

                  /* memory map it */
                  if ((pmemaddr = pmem_map(fd)) == NULL) {
                      perror("pmem_map");
                      exit(1);
                  }
                  close(fd);

                  /* determine if range is true pmem */
                  is_pmem = pmem_is_pmem(pmemaddr, PMEM_LEN);

                  /* store a string to the persistent memory */
                  strcpy(pmemaddr, "hello, persistent memory");

                  /* flush above strcpy to persistence */
                  if (is_pmem)
                      pmem_persist(pmemaddr, PMEM_LEN);
                  else
                      pmem_msync(pmemaddr, PMEM_LEN);
              }

       See http://pmem.io/nvml/libpmem for more  examples  using  the  libpmem
       API.

ACKNOWLEDGEMENTS
       libpmem  builds  on the persistent memory programming model recommended
       by the SNIA NVM Programming Technical Work Group:

              http://snia.org/nvmp

SEE ALSO
       mmap(2),  munmap(2),  msync(2),  strerror(3),  libpmemobj(3),  libpmem‐
       blk(3), libpmemlog(3), libvmem(3) and http://pmem.io.



NVM Library                 pmem API version 0.8.4                  libpmem(3)
